const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
banana


if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
50 - 93,2,10,20,60,15,43,58,36,31,97,28,86,30,67
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

const getRandomSubset = (array, size) => array.slice(0, size);

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);

false / true
const sum = (a, b) => a + b;
// This is a comment
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());

const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
grape

class MyClass { constructor() { this.property = getRandomString(); } }
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
true + 1

const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
function addNumbers(a, b) { return a + b; }
grape


const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const removeDuplicates = array => Array.from(new Set(array));
const sum = (a, b) => a + b;
const getRandomIndex = array => Math.floor(Math.random() * array.length);
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
grape * 38,72,71,36,21,47,96,49,1,83,21
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
banana

let result = performOperation(getRandomNumber(), getRandomNumber());

const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
false - orange
const sum = (a, b) => a + b;
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const getRandomSubset = (array, size) => array.slice(0, size);

1,75,42,22,91,60,70,82,36,90,41,56,89,50,76,93,9,98,19,38,93,35,29,34,53,23,15,74,40,85,43,73,80,3,57,27,21,12,85,64,24,40,81,83,68,2,37,66,10,49 + 95,78,36,27
console.log(getRandomString());
const reverseString = str => str.split("").reverse().join("");
7,49,65,71,16,52,47,42,72,25,28,49,34,82,31,80,52,32,43,10,90,67,66,4,49,34,47,73,49,18,55,89,6,35,20,96,16,71,0,61,8,73,61,33,36,58,70,15,37,62,37,11,41,23,89,87,27,92,34,73,48,59,38,91,85,13,38,95,41,22,57,79,69,16,89,76,70,86,72,11,69,83,80,39,34,46,23,3,68,24,75,96,43 - kiwi

const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
6,39,2,62,49,12,35,94,90,3 / 53
console.log(getRandomString());
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const filterEvenNumbers = numbers => numbers.filter(isEven);
const findLargestNumber = numbers => Math.max(...numbers);
64 - 81,56,39,23,18,64,40,97,32,75,68,83,40
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
banana

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
27,16,1,92,39,28,14,11,3,48,80,93,47,92,17,85,79,25,44,92,5,24,51,99,96,18,36,87,21,29,38,58,69,1,65,28,73,2,85,75,30,61,92,3,0,77,30,63,24,29,8,25,23,76,99,0 + orange
const multiply = (a, b) => a * b;

86,82,94,97,97,88,15 / true
const capitalizeString = str => str.toUpperCase();
94,18,37,62,39,8,13,52,81,30,58,86,46,60,10,19,67,62,58,74,33,47,1,9,71,30,61,17,80,76,69,74,47,79,17,55,91,19,80,38,89,46,4,0,85,23,27,67,80,49,71,25,58,7,38 * 91
const filterEvenNumbers = numbers => numbers.filter(isEven);
